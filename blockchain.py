# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError('Python 2.7 or later required')

# Import the low-level C/C++ module
if __package__ or '.' in __name__:
    from . import _blockchain
else:
    import _blockchain

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if name == "thisown":
        return self.this.own(value)
    if name == "this":
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if not static:
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if name == "thisown":
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _blockchain.delete_SwigPyIterator

    def value(self):
        return _blockchain.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _blockchain.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _blockchain.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _blockchain.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _blockchain.SwigPyIterator_equal(self, x)

    def copy(self):
        return _blockchain.SwigPyIterator_copy(self)

    def next(self):
        return _blockchain.SwigPyIterator_next(self)

    def __next__(self):
        return _blockchain.SwigPyIterator___next__(self)

    def previous(self):
        return _blockchain.SwigPyIterator_previous(self)

    def advance(self, n):
        return _blockchain.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _blockchain.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _blockchain.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _blockchain.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _blockchain.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _blockchain.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _blockchain.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _blockchain:
_blockchain.SwigPyIterator_swigregister(SwigPyIterator)

class transaction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    sender = property(_blockchain.transaction_sender_get, _blockchain.transaction_sender_set)
    recipient = property(_blockchain.transaction_recipient_get, _blockchain.transaction_recipient_set)
    amount = property(_blockchain.transaction_amount_get, _blockchain.transaction_amount_set)

    def __init__(self):
        _blockchain.transaction_swiginit(self, _blockchain.new_transaction())
    __swig_destroy__ = _blockchain.delete_transaction

# Register transaction in _blockchain:
_blockchain.transaction_swigregister(transaction)

class block(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    index = property(_blockchain.block_index_get, _blockchain.block_index_set)
    timestamp = property(_blockchain.block_timestamp_get, _blockchain.block_timestamp_set)
    transactions = property(_blockchain.block_transactions_get, _blockchain.block_transactions_set)
    proof = property(_blockchain.block_proof_get, _blockchain.block_proof_set)
    prev_hash = property(_blockchain.block_prev_hash_get, _blockchain.block_prev_hash_set)

    def __init__(self):
        _blockchain.block_swiginit(self, _blockchain.new_block())
    __swig_destroy__ = _blockchain.delete_block

# Register block in _blockchain:
_blockchain.block_swigregister(block)

class Blockchain(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    chain = property(_blockchain.Blockchain_chain_get, _blockchain.Blockchain_chain_set)
    current_transactions = property(_blockchain.Blockchain_current_transactions_get, _blockchain.Blockchain_current_transactions_set)
    nodes = property(_blockchain.Blockchain_nodes_get, _blockchain.Blockchain_nodes_set)

    def __init__(self):
        _blockchain.Blockchain_swiginit(self, _blockchain.new_Blockchain())

    def new_block(self, proof, prev_hash):
        return _blockchain.Blockchain_new_block(self, proof, prev_hash)

    def new_transaction(self, sender, recipient, amount):
        return _blockchain.Blockchain_new_transaction(self, sender, recipient, amount)

    def hash(self, block):
        return _blockchain.Blockchain_hash(self, block)

    def proof_of_work(self, last_proof):
        return _blockchain.Blockchain_proof_of_work(self, last_proof)

    def valid_proof(self, last_proof, proof):
        return _blockchain.Blockchain_valid_proof(self, last_proof, proof)

    def last_block(self):
        return _blockchain.Blockchain_last_block(self)

    def register_node(self, address):
        return _blockchain.Blockchain_register_node(self, address)

    def valid_chain(self, passed_chain):
        return _blockchain.Blockchain_valid_chain(self, passed_chain)

    def resolve_conflicts(self, passed_chain):
        return _blockchain.Blockchain_resolve_conflicts(self, passed_chain)
    __swig_destroy__ = _blockchain.delete_Blockchain

# Register Blockchain in _blockchain:
_blockchain.Blockchain_swigregister(Blockchain)

class vectorblock(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _blockchain.vectorblock_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _blockchain.vectorblock___nonzero__(self)

    def __bool__(self):
        return _blockchain.vectorblock___bool__(self)

    def __len__(self):
        return _blockchain.vectorblock___len__(self)

    def __getslice__(self, i, j):
        return _blockchain.vectorblock___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _blockchain.vectorblock___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _blockchain.vectorblock___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _blockchain.vectorblock___delitem__(self, *args)

    def __getitem__(self, *args):
        return _blockchain.vectorblock___getitem__(self, *args)

    def __setitem__(self, *args):
        return _blockchain.vectorblock___setitem__(self, *args)

    def pop(self):
        return _blockchain.vectorblock_pop(self)

    def append(self, x):
        return _blockchain.vectorblock_append(self, x)

    def empty(self):
        return _blockchain.vectorblock_empty(self)

    def size(self):
        return _blockchain.vectorblock_size(self)

    def swap(self, v):
        return _blockchain.vectorblock_swap(self, v)

    def begin(self):
        return _blockchain.vectorblock_begin(self)

    def end(self):
        return _blockchain.vectorblock_end(self)

    def rbegin(self):
        return _blockchain.vectorblock_rbegin(self)

    def rend(self):
        return _blockchain.vectorblock_rend(self)

    def clear(self):
        return _blockchain.vectorblock_clear(self)

    def get_allocator(self):
        return _blockchain.vectorblock_get_allocator(self)

    def pop_back(self):
        return _blockchain.vectorblock_pop_back(self)

    def erase(self, *args):
        return _blockchain.vectorblock_erase(self, *args)

    def __init__(self, *args):
        _blockchain.vectorblock_swiginit(self, _blockchain.new_vectorblock(*args))

    def push_back(self, x):
        return _blockchain.vectorblock_push_back(self, x)

    def front(self):
        return _blockchain.vectorblock_front(self)

    def back(self):
        return _blockchain.vectorblock_back(self)

    def assign(self, n, x):
        return _blockchain.vectorblock_assign(self, n, x)

    def resize(self, *args):
        return _blockchain.vectorblock_resize(self, *args)

    def insert(self, *args):
        return _blockchain.vectorblock_insert(self, *args)

    def reserve(self, n):
        return _blockchain.vectorblock_reserve(self, n)

    def capacity(self):
        return _blockchain.vectorblock_capacity(self)
    __swig_destroy__ = _blockchain.delete_vectorblock

# Register vectorblock in _blockchain:
_blockchain.vectorblock_swigregister(vectorblock)

class vectortransaction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _blockchain.vectortransaction_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _blockchain.vectortransaction___nonzero__(self)

    def __bool__(self):
        return _blockchain.vectortransaction___bool__(self)

    def __len__(self):
        return _blockchain.vectortransaction___len__(self)

    def __getslice__(self, i, j):
        return _blockchain.vectortransaction___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _blockchain.vectortransaction___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _blockchain.vectortransaction___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _blockchain.vectortransaction___delitem__(self, *args)

    def __getitem__(self, *args):
        return _blockchain.vectortransaction___getitem__(self, *args)

    def __setitem__(self, *args):
        return _blockchain.vectortransaction___setitem__(self, *args)

    def pop(self):
        return _blockchain.vectortransaction_pop(self)

    def append(self, x):
        return _blockchain.vectortransaction_append(self, x)

    def empty(self):
        return _blockchain.vectortransaction_empty(self)

    def size(self):
        return _blockchain.vectortransaction_size(self)

    def swap(self, v):
        return _blockchain.vectortransaction_swap(self, v)

    def begin(self):
        return _blockchain.vectortransaction_begin(self)

    def end(self):
        return _blockchain.vectortransaction_end(self)

    def rbegin(self):
        return _blockchain.vectortransaction_rbegin(self)

    def rend(self):
        return _blockchain.vectortransaction_rend(self)

    def clear(self):
        return _blockchain.vectortransaction_clear(self)

    def get_allocator(self):
        return _blockchain.vectortransaction_get_allocator(self)

    def pop_back(self):
        return _blockchain.vectortransaction_pop_back(self)

    def erase(self, *args):
        return _blockchain.vectortransaction_erase(self, *args)

    def __init__(self, *args):
        _blockchain.vectortransaction_swiginit(self, _blockchain.new_vectortransaction(*args))

    def push_back(self, x):
        return _blockchain.vectortransaction_push_back(self, x)

    def front(self):
        return _blockchain.vectortransaction_front(self)

    def back(self):
        return _blockchain.vectortransaction_back(self)

    def assign(self, n, x):
        return _blockchain.vectortransaction_assign(self, n, x)

    def resize(self, *args):
        return _blockchain.vectortransaction_resize(self, *args)

    def insert(self, *args):
        return _blockchain.vectortransaction_insert(self, *args)

    def reserve(self, n):
        return _blockchain.vectortransaction_reserve(self, n)

    def capacity(self):
        return _blockchain.vectortransaction_capacity(self)
    __swig_destroy__ = _blockchain.delete_vectortransaction

# Register vectortransaction in _blockchain:
_blockchain.vectortransaction_swigregister(vectortransaction)

class vectornodes(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _blockchain.vectornodes_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _blockchain.vectornodes___nonzero__(self)

    def __bool__(self):
        return _blockchain.vectornodes___bool__(self)

    def __len__(self):
        return _blockchain.vectornodes___len__(self)

    def __getslice__(self, i, j):
        return _blockchain.vectornodes___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _blockchain.vectornodes___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _blockchain.vectornodes___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _blockchain.vectornodes___delitem__(self, *args)

    def __getitem__(self, *args):
        return _blockchain.vectornodes___getitem__(self, *args)

    def __setitem__(self, *args):
        return _blockchain.vectornodes___setitem__(self, *args)

    def pop(self):
        return _blockchain.vectornodes_pop(self)

    def append(self, x):
        return _blockchain.vectornodes_append(self, x)

    def empty(self):
        return _blockchain.vectornodes_empty(self)

    def size(self):
        return _blockchain.vectornodes_size(self)

    def swap(self, v):
        return _blockchain.vectornodes_swap(self, v)

    def begin(self):
        return _blockchain.vectornodes_begin(self)

    def end(self):
        return _blockchain.vectornodes_end(self)

    def rbegin(self):
        return _blockchain.vectornodes_rbegin(self)

    def rend(self):
        return _blockchain.vectornodes_rend(self)

    def clear(self):
        return _blockchain.vectornodes_clear(self)

    def get_allocator(self):
        return _blockchain.vectornodes_get_allocator(self)

    def pop_back(self):
        return _blockchain.vectornodes_pop_back(self)

    def erase(self, *args):
        return _blockchain.vectornodes_erase(self, *args)

    def __init__(self, *args):
        _blockchain.vectornodes_swiginit(self, _blockchain.new_vectornodes(*args))

    def push_back(self, x):
        return _blockchain.vectornodes_push_back(self, x)

    def front(self):
        return _blockchain.vectornodes_front(self)

    def back(self):
        return _blockchain.vectornodes_back(self)

    def assign(self, n, x):
        return _blockchain.vectornodes_assign(self, n, x)

    def resize(self, *args):
        return _blockchain.vectornodes_resize(self, *args)

    def insert(self, *args):
        return _blockchain.vectornodes_insert(self, *args)

    def reserve(self, n):
        return _blockchain.vectornodes_reserve(self, n)

    def capacity(self):
        return _blockchain.vectornodes_capacity(self)
    __swig_destroy__ = _blockchain.delete_vectornodes

# Register vectornodes in _blockchain:
_blockchain.vectornodes_swigregister(vectornodes)



